<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Simon Weber</title>
 <link href="http://www.simonmweber.com/atom.xml" rel="self"/>
 <link href="http://www.simonmweber.com/"/>
 <updated>2013-04-20T17:01:42-04:00</updated>
 <id>http://www.simonmweber.com/</id>
 <author>
   <name>Simon Weber</name>
   <email>simon@simonmweber.com</email>
 </author>

 
 <entry>
   <title>Development on a Chromebook: an opinionated guide</title>
   <link href="http://www.simonmweber.com/2013/04/20/development-on-a-chromebook-an-opinionated-guide.html"/>
   <updated>2013-04-20T00:00:00-04:00</updated>
   <id>http://www.simonmweber.com/2013/04/20/development-on-a-chromebook-an-opinionated-guide</id>
   <content type="html">&lt;h2 id='development_on_a_chromebook_an_opinionated_guide'&gt;Development on a Chromebook: an opinionated guide&lt;/h2&gt;
&lt;p class='meta'&gt;April 20 2013&lt;/p&gt;
&lt;p&gt;I started using a &lt;a href='http://www.google.com/intl/en/chrome/devices/chromebook-samsung-550.html'&gt;Samsung 550 Chromebook&lt;/a&gt; as my on-the-go machine two semesters ago. It worked nicely for taking notes, but I remained a skeptic: how could I ever write code from a glorified web browser?&lt;/p&gt;

&lt;p&gt;Fast forward 6 months: today, I love hacking on my Chromebook, and I have no problems working offline. It took some effort to get everything set up, so I’ve put together my recommendations to get other folks up to speed.&lt;/p&gt;

&lt;p&gt;First, a disclaimer: the device was given to me as part of the &lt;a href='http://www.google.com/intl/en/jobs/students/proscho/programs/uscanada/ambassador/'&gt;Google Student Ambassador Program&lt;/a&gt;, and Google pays me for brand advocacy at my school. That said, I’m &lt;em&gt;not&lt;/em&gt; getting paid to write this, and this is my advice, not Google’s. I’m a hacker, not a shill (and I’ll even save hn the work of linking &lt;a href='http://www.paulgraham.com/submarine.html'&gt;pg’s submarine essay&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Anyway: let’s get started. It’s easiest to work over ssh, so I’ll cover this first. Later, I’ll get to working offline. I won’t talk about cloud development webapps because I don’t find them useful. Also, I don’t have any advice if you prefer heavy IDEs; my usual tools are a terminal and web browser.&lt;/p&gt;

&lt;h3 id='for_when_you_have_a_good_connection'&gt;For when you have a good connection&lt;/h3&gt;

&lt;h4 id='ssh'&gt;ssh&lt;/h4&gt;

&lt;p&gt;You want &lt;a href='https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo'&gt;Secure Shell&lt;/a&gt; as your ssh client. It’s basically openssh wrapped for &lt;a href='https://developers.google.com/native-client/'&gt;NaCl&lt;/a&gt;, with &lt;a href='https://groups.google.com/a/chromium.org/group/chromium-hterm'&gt;hterm&lt;/a&gt; powering the ui.&lt;/p&gt;

&lt;p&gt;It supports everything you’d expect, like key authentication, per-connection profiles, port forwarding, custom color schemes, and even your &lt;code&gt;~/.ssh/config&lt;/code&gt; file (well, probably; mine is simple).&lt;/p&gt;

&lt;p&gt;The &lt;a href='http://goo.gl/RYHiK'&gt;chromium-hterm mailing list&lt;/a&gt; is where updates are posted. If you need an upcoming feature &lt;em&gt;now&lt;/em&gt;, there’s also a hidden &lt;a href='http://goo.gl/cFZlv'&gt;dev channel&lt;/a&gt; (you need to be logged into an account that’s on the mailing list for this link to work).&lt;/p&gt;

&lt;p&gt;A quick tip: set Secure Shell to ‘Open as Window’, otherwise Chrome will intercept keyboard shortcuts (which e.g. makes Control-W close your terminal). You’ll probably also want to set TERM to xterm. The FAQ (linked below) has the details and is worth reading through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://goo.gl/3i5AJ'&gt;Secure Shell FAQ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://gist.github.com/johnbender/5018685'&gt;Solarized colors&lt;/a&gt; (run the commands in a DevTools javascript console)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='vpn'&gt;vpn&lt;/h4&gt;

&lt;p&gt;&lt;a href='http://support.google.com/chromeos/bin/answer.py?hl=en&amp;amp;answer=1282338'&gt;Legend has it&lt;/a&gt; that CrOS supports OpenVPN and L2TP/IPsec. However, I couldn’t get either to work. If you really need vpn as part of your workflow, be prepared to jump through some hoops.&lt;/p&gt;

&lt;p&gt;Granted, my attempts were a few months ago. The team is working on this, but I haven’t seen real progress; for OpenVPN updates, star &lt;a href='https://code.google.com/p/chromium/issues/detail?id=217624'&gt;this issue&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id='remote_desktop'&gt;remote desktop&lt;/h4&gt;

&lt;p&gt;If you need a graphical environment, you can use &lt;a href='https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp'&gt;Chrome Remote Desktop&lt;/a&gt;. This provides vnc-like functionality across Windows, Mac and Linux, and can be set up for repeated or one-off access. Note that you cannot currently remote &lt;em&gt;into&lt;/em&gt; a Chromebook.&lt;/p&gt;

&lt;p&gt;I rarely need this.&lt;/p&gt;

&lt;h4 id='crosh_window'&gt;Crosh Window&lt;/h4&gt;

&lt;p&gt;Crosh, the built-in CrOS shell, can (and should) usually be avoided. If you find yourself using it, &lt;a href='https://chrome.google.com/webstore/detail/crosh-window/nhbmpbdladcchdhkemlojfjdknjadhmh?hl=en-US'&gt;Crosh Window&lt;/a&gt; takes away some of the pain; it fixes the Control-W problem mentioned earlier and gets you an up-to-date version of hterm.&lt;/p&gt;

&lt;h3 id='for_when_youre_offline_or_on_a_terrible_connection'&gt;For when you’re offline or on a terrible connection&lt;/h3&gt;

&lt;h4 id='crouton'&gt;crouton&lt;/h4&gt;

&lt;p&gt;For offline work, you’ll want root access to a local Linux install. &lt;a href='https://github.com/dnschneid/crouton'&gt;crouton&lt;/a&gt; is &lt;em&gt;by far&lt;/em&gt; the best way to go about this: it runs Ubuntu in a chroot. This has security implications (check the README), but you avoid the performance hit of virtualization, and keep all the CrOS functionality.&lt;/p&gt;

&lt;p&gt;You’ll need to have your Chromebook in developer mode (i.e. rooted) to use it, which is easy: you flip a hardware switch and wipe your device. The specifics for going about this vary by model, so just search for instructions. Once in dev mode, you’ll want to hit Control-D on each boot to skip the “you’re in developer mode” warning (there’s a 30-second wait otherwise). Have faith: this isn’t nearly as annoying as it sounds.&lt;/p&gt;

&lt;p&gt;The crouton README has all the information you need to get started. Note that you can run a normal graphical environment (e.g. Xfce) alongside CrOS. I prefer using Secure Shell to ssh into localhost so I can keep my terminal customizations and stay in CrOS. If this sounds appealing, here’s what I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;used the crouton cli-extra target (eg &lt;code&gt;crouton -t cli-extra ...&lt;/code&gt;).&lt;/li&gt;

&lt;li&gt;installed openssh in my chroot&lt;/li&gt;

&lt;li&gt;start sshd, then use Secure Shell to connect to my-user@localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make life a bit easier, I stuck &lt;code&gt;/etc/init.d/ssh start&lt;/code&gt; into my chroot’s &lt;code&gt;/etc/rc.local&lt;/code&gt; (which crouton runs upon mounting). Now, when I want to work locally, I just Control-Alt-Forward to get my local shell, &lt;code&gt;$ sudo enter-chroot&lt;/code&gt;, Control-Alt-Back to CrOS and then run Secure Shell. You could probably get your chroot to mount and run sshd on boot if you use it all the time.&lt;/p&gt;

&lt;h4 id='mosh'&gt;mosh&lt;/h4&gt;

&lt;p&gt;To deal with flaky connections, install &lt;a href='http://mosh.mit.edu/'&gt;mosh&lt;/a&gt; on your chroot. You might have to compile it from source to get the most recent features (e.g. &lt;code&gt;--ssh&lt;/code&gt;), but this isn’t a big deal. You’ll need to install it on your server, too (it doesn’t require root).&lt;/p&gt;

&lt;p&gt;You can use Secure Shell’s ‘SSH Arguments’ to save some typing if you often mosh into a particular machine.&lt;/p&gt;

&lt;p&gt;In the future, you probably won’t need crouton to use mosh: &lt;a href='https://github.com/davidben/mosh-chrome'&gt;there’s a NaCl port on GitHub&lt;/a&gt; that mostly works. I’m hoping to get it ready for Web Store deployment during &lt;a href='https://www.hackerschool.com/'&gt;Hacker School&lt;/a&gt; this summer.&lt;/p&gt;

&lt;p&gt;If you’re a fellow Chromebook hacker and think I missed something, definitely let me know. I’ll do my best to keep this guide updated as better tools arrive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;edit&lt;/em&gt;: here&amp;#8217;s a link to the &lt;a href='https://news.ycombinator.com/item?id=5582531'&gt;hn discussion&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Tough cookies: a debugging story</title>
   <link href="http://www.simonmweber.com/2013/02/14/tough-cookies-a-debugging-story.html"/>
   <updated>2013-02-14T00:00:00-05:00</updated>
   <id>http://www.simonmweber.com/2013/02/14/tough-cookies-a-debugging-story</id>
   <content type="html">&lt;h2 id='tough_cookies_a_debugging_story'&gt;Tough cookies: a debugging story&lt;/h2&gt;
&lt;p class='meta'&gt;February 14 2012&lt;/p&gt;
&lt;p&gt;I used to think of (web) cookies as simple key/value pairs. That was before I spent an hour tracking down a bug in &lt;a href='http://github.com/simon-weber/Unofficial-Google-Music-API'&gt;gmusicapi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The symptoms were simple. The user would successfully log in. Then, on their first request to a web service endpoint (eg music.google.com/loadalltracks), Google would reject their request and redirect them to a login page.&lt;/p&gt;

&lt;p&gt;The auth code was immediately suspect. However, there were a few complications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I could not recreate the issue&lt;/li&gt;

&lt;li&gt;that code hadn’t changed much since last known-good version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The user who reported the bug stopped by #gmusicapi on Freenode (thanks, Leonardo!) and humored my requests for debug information. Here&amp;#8217;s what we found out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the login was successful; calls to Music Manager endpoints succeeded&lt;/li&gt;

&lt;li&gt;the user was outside of the US&lt;/li&gt;

&lt;li&gt;normal login to music.google.com through a browser was fine&lt;/li&gt;

&lt;li&gt;the bug did not depend on multiple login status, locale assumptions or current login status&lt;/li&gt;

&lt;li&gt;the user had all the proper session cookies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout all this, I still could not recreate the issue. In a lucky guess, I used a test account from outside the US: bingo! This only affected non-US logins!&lt;/p&gt;

&lt;p&gt;Now that I had a way to recreate the bug, I fired up git bisect to track down the commit that introduced it. Inside a function to take a &lt;a href='http://docs.python-requests.org/en/latest/'&gt;requests.Request&lt;/a&gt; and send it off to Google, here’s the relevant code before:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;send_xt&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;xt&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get_web_cookie&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;xt&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c'&gt;# web_cookies is a CookieJar&lt;/span&gt;
&lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;

&lt;span class='n'&gt;prep_request&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;prepare&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;requests&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;Session&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='n'&gt;res&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;send&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;prep_request&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and after:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt; &lt;span class='ow'&gt;is&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;

&lt;span class='c'&gt;#Attach auth.&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;send_xt&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;xt&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get_web_cookie&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;xt&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;send_clientlogin&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;SID&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;client&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;get_sid_token&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;send_sso&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='c'&gt;#dict &amp;lt;- CookieJar&lt;/span&gt;
    &lt;span class='n'&gt;web_cookies&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;prepped&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;prepare&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;requests&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;Session&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

&lt;span class='n'&gt;res&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;send&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;prepped&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;session_options&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commit was some refactoring from two separate request-sending functions (eg send_web_request and send_musicmanager_request) to one. Do you see the bug? Here’s a hint, changing:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;update&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;cookies&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;web_cookies&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;solves the problem (hackily, since then clientlogin and sso auth can’t be sent together, but that never happens anyway - and this will all be rewritten soon).&lt;/p&gt;

&lt;p&gt;If you didn&amp;#8217;t figure it out, here&amp;#8217;s the issue: auth was stored in Python &lt;a href='http://docs.python.org/2/library/cookie.html#module-Cookie'&gt;Cookie objects&lt;/a&gt;, but I had attached them to the request as a name/value dictionary. In doing so, there was information loss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in the case of cookies with identical names, only one would be sent&lt;/li&gt;

&lt;li&gt;Cookie-specific fields like secure and domain were dropped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In their Python form, Cookies are not simple name/value pairs! Attaching Cookies directly to the request kept all the relevant information and solved the problem.&lt;/p&gt;

&lt;p&gt;I’d like to thank Lukasa and SigmaVirus24 on #python-requests for pointing me to the relevant Requests internals, and for generally putting up with my mad raving. Lukasa also had what I thought was some sharp insight into the situation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;simon_weber&lt;/strong&gt;: I suppose it would be nice for tear-their-own-hair-out insane folks like me to be able to set both simple and Cookie cookies [using Requests]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lukasa&lt;/strong&gt;: I think more than that, we want to discourage it. Cookies are complicated and easy to get wrong (as this entire discussion shows)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lukasa&lt;/strong&gt;: And so we&amp;#8217;d rather that people use the known-good code in Requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He’s exactly right, of course, and I already have an entry on my todo list for this (I’ve just got &lt;a href='https://github.com/simon-weber/Unofficial-Google-Music-API/issues'&gt;a lot on my plate&lt;/a&gt; at the moment).&lt;/p&gt;

&lt;p&gt;At least this story has a happy ending: despite the confusion, gmusicapi soldiers on with &lt;a href='https://twitter.com/thiloleibelt/status/302159032922296322'&gt;happy international users&lt;/a&gt;. As for me, having learned from this bug hunt, hopefully I’ll never be suckered into disrespecting the surprising complexity of the cookie - nor their internet cousins of the same name.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What's in a genre?</title>
   <link href="http://www.simonmweber.com/2012/09/07/whats-in-a-genre.html"/>
   <updated>2012-09-07T00:00:00-04:00</updated>
   <id>http://www.simonmweber.com/2012/09/07/whats-in-a-genre</id>
   <content type="html">&lt;script src='//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js'&gt;
&lt;/script&gt;&lt;script src='https://www.google.com/jsapi' type='text/javascript'&gt;
&lt;/script&gt;&lt;script type='text/javascript'&gt;
$(document).ready(function(){
  google.load('visualization', '1.0', {
    'packages':['corechart'],
    'callback': drawOccurrenceChart
  });

  function drawOccurrenceChart(){
    $.getJSON('/data/occurrences.json', function(data) {
      data.unshift(['Word', 'Occurrences']);
      var table = google.visualization.arrayToDataTable(data);
      var options = { 
        title: 'Frequency of words in genres',
        backgroundColor: {fill:'transparent'}
      };

      var chart = new google.visualization.PieChart(document.getElementById('words_chart'));
      chart.draw(table, options);
    });
  }
});
&lt;/script&gt;
&lt;h2 id='whats_in_a_genre'&gt;What&amp;#8217;s in a genre?&lt;/h2&gt;
&lt;p class='meta'&gt;September 07 2012&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m taking a course on data mining this semester. Our first assignment: mine some data. The dataset and techniques don&amp;#8217;t matter; the point is to extract meaning in any way possible. I&amp;#8217;m greenhorn data miner; hopefully I&amp;#8217;ll be able to look back at this post and laugh at my own naivete.&lt;/p&gt;

&lt;p&gt;For my dataset I chose my own Google Music library. It&amp;#8217;s unique, big enough (7600+ songs), and well organized. Plus, it&amp;#8217;s a cinch to access with my &lt;a href='https://github.com/simon-weber/Unofficial-Google-Music-API'&gt;Google Music api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My analysis was simple: I investigated the occurrences of words in genres. I figured the most frequent words would be genres themselves (eg &amp;#8216;metal&amp;#8217; in &amp;#8216;power metal&amp;#8217;), but there was also the chance of exposing common adjectives (eg &amp;#8216;post&amp;#8217; in &amp;#8216;post-rock&amp;#8217; and &amp;#8216;post-metal&amp;#8217;).&lt;/p&gt;

&lt;p&gt;A few lines of Python later, and I had my results. The first thing I noticed: I listen to a lot of metal. A third of my songs are some kind of metal. If you put all the genre words into a hat, you&amp;#8217;d pick &amp;#8216;metal&amp;#8217; almost a quarter of the time. Next up: &amp;#8216;rock&amp;#8217; and &amp;#8216;jazz&amp;#8217;. Rounding out the top six are two adjectives - &amp;#8216;alternative&amp;#8217; and &amp;#8216;progressive&amp;#8217; - as well as &amp;#8216;accompaniment&amp;#8217; (as in &lt;a href='http://en.wikipedia.org/wiki/Jamey_Aebersold'&gt;Jamey Aebersold&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Metal bands also claim the longest genres in my library. &lt;a href='http://en.wikipedia.org/wiki/Novembre_(band)'&gt;Novembre&lt;/a&gt; is the champion, boasting this mouthful: &amp;#8216;Progressive atmospheric doom metal&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;#8217;ve figured out I&amp;#8217;m a jazz-playing metalhead, let&amp;#8217;s take a look at the least common words. &amp;#8216;Country&amp;#8217; appears only once (and at the risk of sounding one-sided, it labels the fantastic &lt;a href='http://en.wikipedia.org/wiki/Slaughter_of_the_bluegrass'&gt;Slaughter of the Bluegrass&lt;/a&gt;). There&amp;#8217;s a bunch of mispellings, too, like &amp;#8216;reggaer&amp;#8217; and &amp;#8216;sountrack&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a quick chart of all the words I found:&lt;/p&gt;
&lt;div class='eleven columns' id='words_chart' style='height: 400px;'&gt; &lt;/div&gt;
&lt;p&gt;This assignment turned out to be a surprising amount of fun. For any other music lovers who want to take a dive into their libraries, I&amp;#8217;ve got the &lt;a href='https://github.com/simon-weber/Google-Music-genre-analysis'&gt;source on GitHub&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Returning to the east</title>
   <link href="http://www.simonmweber.com/2012/08/29/returning-to-the-east.html"/>
   <updated>2012-08-29T00:00:00-04:00</updated>
   <id>http://www.simonmweber.com/2012/08/29/returning-to-the-east</id>
   <content type="html">&lt;h2 id='returning_to_the_east'&gt;Returning to the east&lt;/h2&gt;
&lt;p class='meta'&gt;August 29 2012&lt;/p&gt;
&lt;p&gt;I spent the summer as a Google intern at their Mountain View headquarters. Having recently returned to the east, the California sun has now melted into Pennsylvania rain; it’s an anticlimactic end to an otherwise fantastic summer.&lt;/p&gt;

&lt;p&gt;Google exceeded my expectations. I arrived skeptical, expecting to see their world-famous perks masking a typical BigCo™ culture - where engineers are codemonkeys, bureaucracy reigns, and nobody cares about users. I’m happy to report that this is far from the truth. While Google as a whole is definitely nothing like a startup - don’t let anyone tell you otherwise - the culture felt healthy. Googlers constantly stick up for their users, openly asking the hard questions of management.&lt;/p&gt;

&lt;p&gt;Google’s also got an incredible amount of talent, which was reflected in those I worked with. My team was responsible for making Google’s call centers more efficient (yes, Google does pick up the phone, but only for paying customers). I was tasked with a webapp to provide real-time visualization of our call centers’ statuses. This allows managers to intelligently shuffle agents around to different call queues. The entire project was my responsibility: project management, frontend, backend, monitoring, deployment&amp;#8230;the works. I got to play with all kinds of internal secret-sauce, and despite ballooning requirements, my team and I were really pleased with what I shipped.&lt;/p&gt;

&lt;p&gt;When I wasn’t banging out code, the Google perks didn’t disappoint. Tech talks and events: held daily (one of which &lt;a href='https://docs.google.com/presentation/d/1grp9hLaYnegWN0rfkZHSfqtYmBme9vtaAoinZmIIqKI/edit'&gt;I presented&lt;/a&gt;). The food: delicious. The booze: classy. Googlers are encouraged (expected?) to work hard and play hard. This seems to align with what I experienced at visits to other bay area companies: GitHub, Quora, LinkedIn, Stripe, Facebook, etc.&lt;/p&gt;

&lt;p&gt;Silicon Valley boasts perfect weather, but the best part was the people. I hung out with a posse of interns from various tech companies. I danced in Google’s SF Pride contingent. I watched classic demoscene while discussing phreaker war stories at &lt;a href='http://www.hackerdojo.com'&gt;Hacker Dojo&lt;/a&gt;. I ate donut burgers with Zuck, &lt;a href='http://www.youtube.com/watch?v=SNdcgVTTaS8'&gt;partied&lt;/a&gt; with PJ Hyett, and boogied with Alan Eustace.&lt;/p&gt;
&lt;div class='figure'&gt;
&lt;p&gt;&lt;img alt='Alan Eustace and Simon Weber dancing' src='/images/alan_eustace_dancing.jpg' /&gt;&lt;/p&gt;
&lt;p&gt;No, seriously: this is Alan and me on the dance floor.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All these people had a common feature: real passion for their work. Being around this energy has inspired me, so - with my Google legal restrictions lifted - I’m ready to jump into my side projects again. I’ll be maintaining my &lt;a href='https://github.com/simon-weber/Unofficial-Google-Music-API'&gt;Google Music api&lt;/a&gt;, but probably won’t implement any huge new features. Instead, my time will likely be spent dogfooding it in a project to sync 3rd party media players to Google Music. I’ve already finished a &lt;a href='https://github.com/simon-weber/Mirror-MediaMonkey-to-Google-Music'&gt;proof of concept&lt;/a&gt;; now it’s time to buckle down and ship something. That is, if this unacceptable (read: not absolutely perfect) east coast weather doesn’t kill me first.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Cold-email a VP, publish in Phrack</title>
   <link href="http://www.simonmweber.com/2012/04/14/email-vps-and-publish-in-phrack.html"/>
   <updated>2012-04-14T00:00:00-04:00</updated>
   <id>http://www.simonmweber.com/2012/04/14/email-vps-and-publish-in-phrack</id>
   <content type="html">&lt;h2 id='coldemail_a_vp_publish_in_phrack'&gt;Cold-email a VP, publish in Phrack&lt;/h2&gt;
&lt;p class='meta'&gt;14 April 2012&lt;/p&gt;
&lt;p&gt;In the popular sense of the word, I&amp;#8217;m no super-hacker. While coding, my sunglasses and fingerless gloves stay on the desk.&lt;/p&gt;
&lt;div class='figure'&gt;
&lt;p&gt;&lt;img alt='Acid Burn (Hackers 1995) in a trench coat' src='/images/hackers-trenchcoat.jpg' /&gt;&lt;/p&gt;
&lt;p&gt;My collection of sexy trenchcoats is also lacking. (&lt;a href='http://www.news.com.au/technology/gallery-e6frflwi-1225878429415?page=3'&gt;credit&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Despite these disadvantages, back in September I discovered a &lt;a href='https://github.com/simon-weber/XSS-over-NBNS'&gt;vulnerability&lt;/a&gt; in the web interface of a Netgear wireless router. Now &lt;a href='http://www.phrack.com/issues.html?issue=68&amp;amp;id=4#article'&gt;published in Phrack&lt;/a&gt;, my exploit code allowed for nasty things like stealing admin credentials and hiding network devices. I wanted to let Netgear know, so I wrote my first disclosure: a friendly email briefly describing myself, the flaw, and my intentions of publishing.&lt;/p&gt;

&lt;p&gt;Unfortunately, that was the easy part. A Netgear security email was nowhere to be found. In fact, I couldn’t even find a way to submit a support ticket (this has since changed).&lt;/p&gt;

&lt;p&gt;If I could just get my message to a human, I figured it would end up in the right place. After all, who wants to be responsible for blowing off a security flaw? On Netgear’s contact page, I found a press relations email. No response. Investor relations channel? Nope (I must not be rich enough). Support emails found by Googling? Nothing.&lt;/p&gt;

&lt;p&gt;This obviously wasn’t going to work. It was time to pivot.&lt;/p&gt;

&lt;p&gt;Ten more minutes of searching got me everything I needed: the direct emails of five random support staff, plus the most executive position I could muster: the VP of engineering. Brazenly dumping them all in the recipient box, I tried again.&lt;/p&gt;

&lt;p&gt;Within 10 minutes, one of the support staff got back to me, eagerly CC&amp;#8217;ing his boss&amp;#8217;s boss. I apologized, and my ensuing communication with Netgear was pleasant and to the point.&lt;/p&gt;

&lt;p&gt;My takeaway: it’s easier to beg for forgiveness than to ask for permission. Well, that, and don’t let a lack of fingerless gloves keep you from submitting to Phrack.&lt;/p&gt;</content>
 </entry>
 
 
</feed>